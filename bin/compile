#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>

START_TIME=$SECONDS

# set -x
set -o errexit    # always exit on error
set -o pipefail   # don't ignore exit codes when piping output
unset GIT_DIR     # Avoid GIT_DIR leak from previous build steps

# Configure directories

BUILD_DIR=${1:-}
CACHE_DIR=${2:-}
ENV_DIR=${3:-}
BP_DIR=$(cd $(dirname ${0:-}); cd ..; pwd)
NUMBER=$(date +%s)
TARGET_SCRATCH_ORG_ALIAS="scratch-$NUMBER"

# Import dependencies

source $BP_DIR/lib/lib.sh
source $BP_DIR/lib/deps.sh
source $BP_DIR/lib/sfdc.sh

# Prepare environment

setup_dirs() {
  export PATH="$BUILD_DIR/vendor/sfdx/cli/bin:$PATH"
  export PATH="$BUILD_DIR/vendor/sfdx/jq:$PATH"
}

export_env_dir() {
  if [ -d "$ENV_DIR" ]; then
    for e in $(ls $ENV_DIR); do
      export $e=$(cat $ENV_DIR/$e)
      :
    done
  fi
}

# SFDC processes

deploy_to_scratch() {

  RESPONSE_DEV_HUB=$(make_soap_request \
    "$DEV_HUB_USERNAME" \
    "$DEV_HUB_PASSWORD" \
    "$DEV_HUB_TOKEN" \
    "false")

  DEV_HUB_SESSION_ID=$(get_session_id \
    "$RESPONSE_DEV_HUB")

  DEV_HUB_INSTANCE_URL=$(get_instance_url \
    "$RESPONSE_DEV_HUB")

  prepare_sfdc_environment \
    "$DEV_HUB_INSTANCE_URL" \
    "$DEV_HUB_SESSION_ID"

  is_package_exists_on_devhub \
    "$DEV_HUB_SESSION_ID" \
    "$SFDX_PACKAGE_NAME"
  is_package_exists_in_project_file \
    "$SFDX_PACKAGE_NAME"

  sfdx_create_scratch \
    "$DEV_HUB_SESSION_ID" \
    "$TARGET_SCRATCH_ORG_ALIAS"

  sfdx_source_push \
    "$TARGET_SCRATCH_ORG_ALIAS"

  sfdx_run_test \
    "$TARGET_SCRATCH_ORG_ALIAS"

  sfdx_delete_scratch \
    "$TARGET_SCRATCH_ORG_ALIAS" \
    "$DEV_HUB_SESSION_ID"

}

install_package() {

  RESPONSE_DEV_HUB=$(make_soap_request \
    "$DEV_HUB_USERNAME" \
    "$DEV_HUB_PASSWORD" \
    "$DEV_HUB_TOKEN" \
    "false")

  DEV_HUB_SESSION_ID=$(get_session_id \
    "$RESPONSE_DEV_HUB")

  DEV_HUB_INSTANCE_URL=$(get_instance_url \
    "$RESPONSE_DEV_HUB")

  RESPONSE_DEV=$(make_soap_request \
    "$DEV_USERNAME" \
    "$DEV_PASSWORD" \
    "$DEV_TOKEN" \
    "$DEV_IS_SANDBOX")

  DEV_SESSION_ID=$(get_session_id \
    "$RESPONSE_DEV")

  DEV_INSTANCE_URL=$(get_instance_url \
    "$RESPONSE_DEV")

  prepare_sfdc_environment \
    "$DEV_HUB_INSTANCE_URL" \
    "$DEV_HUB_SESSION_ID"

  install_package_version \
    "$SFDX_PACKAGE_NAME" \
    "$DEV_HUB_SESSION_ID" \
    "$DEV_SESSION_ID" \
    "$DEV_INSTANCE_URL" \
    "$BUILD_DIR" \
    "$BP_DIR"

}

header 'Welcome to aquiva-sfdx-buildpack!'

# Repository validations
log "Verifying files ..."
verify_project_file $BUILD_DIR

log "Setting up paths ..."
setup_dirs

log "Starting CLI installation ..."
install_sfdx_cli $BUILD_DIR

log "Starting jq installation ..."
install_jq $BUILD_DIR

log "Setup enviroment variables ..."
export_env_dir

# Create .profile.d folder
mkdir -p $BUILD_DIR/.profile.d

# if no .profile.d/path.sh, create one
if [ ! -f $BUILD_DIR/.profile.d/path.sh ]; then
  log "Creating path.sh ..."
  echo "echo \"Updating PATH to include Salesforce CLI ...\"
  export PATH=\$PATH:/app/vendor/sfdx/cli/bin/" > $BUILD_DIR/.profile.d/path.sh

  log "Generated $BUILD_DIR/.profile.d/path.sh to add CLI path"
fi

# Deploy on app review

cd $BUILD_DIR

if [ "$STAGE" == "" ]; then
  header "Review App deploy ..."

  deploy_to_scratch

fi

# Deploy on Dev org

if [ "$STAGE" == "DEV" ]; then
  header "Develop App deploy ..."

  # deploy_to_scratch

  install_package

fi

# Deploy on Staging org

if [ "$STAGE" == "STAGING" ]; then
  header "Staging App deploy ..."

  is_namespace_exists_in_project_file \
    "$PACKAGE_NAMESPACE"

  deploy_to_scratch

  install_package

fi

header "DONE! Completed in $(($SECONDS - $START_TIME))s"
exit 0
