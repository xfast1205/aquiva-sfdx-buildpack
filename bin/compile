#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>

START_TIME=$SECONDS

# set -x
set -o errexit    # always exit on error
set -o pipefail   # don't ignore exit codes when piping output
unset GIT_DIR     # Avoid GIT_DIR leak from previous build steps

### Configure directories

BUILD_DIR=${1:-}
CACHE_DIR=${2:-}
ENV_DIR=${3:-}
BP_DIR=$(cd $(dirname ${0:-}); cd ..; pwd)
NUMBER=$(date +%s)
TARGET_SCRATCH_ORG_ALIAS="scratch-$NUMBER"
vendorDir="vendor/sfdx"

source $BP_DIR/lib/lib.sh
source $BP_DIR/lib/deps.sh
source $BP_DIR/lib/sfdc.sh

setup_dirs() {
  export PATH="$BUILD_DIR/vendor/sfdx/cli/bin:$PATH"
  export PATH="$BUILD_DIR/vendor/sfdx/jq:$PATH"
}

export_env_dir() {
  if [ -d "$ENV_DIR" ]; then
    for e in $(ls $ENV_DIR); do
      export $e=$(cat $ENV_DIR/$e)
      :
    done
  fi
}

deploy_to_scratch() {

  make_soap_request \
    "$DEV_HUB_USERNAME" \
    "$DEV_HUB_PASSWORD" \
    "$DEV_HUB_TOKEN" \
    "$DEV_HUB_IS_SANDBOX"

  sfdx force:config:set \
    instanceUrl="$INSTANCE_URL"

  sfdx_create_scratch \
    "$SESSION_ID" \
    "$TARGET_SCRATCH_ORG_ALIAS"

  sfdx_source_push \
    "$TARGET_SCRATCH_ORG_ALIAS"

  sfdx_run_test \
    "$TARGET_SCRATCH_ORG_ALIAS"

  sfdx_delete_scratch \
    "$TARGET_SCRATCH_ORG_ALIAS"

}

install_package_qa() {

  make_soap_request \
    "$DEV_HUB_USERNAME" \
    "$DEV_HUB_PASSWORD" \
    "$DEV_HUB_TOKEN" \
    "$DEV_HUB_IS_SANDBOX"

  export DEV_HUB_SESSION="$SESSION_ID"

  make_soap_request \
    "$STAGING_USERNAME" \
    "$STAGING_PASSWORD" \
    "$STAGING_TOKEN" \
    "$STAGING_IS_SANDBOX"

  export STAGING_SESSION="$SESSION_ID"

  install_package_version \
    "$SFDX_PACKAGE_NAME" \
    "$DEV_HUB_SESSION" \
    "$STAGING_SESSION"

}

header 'Welcome to aquiva-sfdx-buildpack!'

log "Setting up paths ..."
setup_dirs

log "Starting CLI installation ..."
install_sfdx_cli $BUILD_DIR

log "Starting jq installation ..."
install_jq $BUILD_DIR

log "Starting xmllint installation ..."
install_xmllint $BUILD_DIR

# Create .profile.d folder
mkdir -p $BUILD_DIR/.profile.d

# if no .profile.d/path.sh, create one
if [ ! -f $BUILD_DIR/.profile.d/path.sh ]; then
  log "Creating path.sh ..."
  echo "echo \"Updating PATH to include Salesforce CLI ...\"
  export PATH=\$PATH:/app/vendor/sfdx/cli/bin/" > $BUILD_DIR/.profile.d/path.sh

  log "Generated $BUILD_DIR/.profile.d/path.sh to add CLI path"
fi

# deploy on app review
cd $BUILD_DIR

if [ "$STAGE" == "" ]; then
  header "Review App deploy ..."

  deploy_to_scratch

fi

# deploy on QA org
if [ "$STAGE" == "STAGING" ]; then
  header "Staging App deploy ..."

  deploy_to_scratch

  install_package_qa

fi

header "DONE! Completed in $(($SECONDS - $START_TIME))s"
exit 0